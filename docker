#!/usr/bin/env ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__))

require 'ci-cd/helpers'

module DockerTool
  require 'thor'
  require 'pty'

  class Common < Thor

    include CICD::Helpers::General

    @@root = File.dirname(File.expand_path(__FILE__))

    desc "build", "builds the development environment"
    def build
      say "Building environment: #{environment}", :green
      in_environment(environment) do
        system_call "docker-compose -f #{path(@@root, "docker-compose-#{environment}.yml")} build"
      end
    end

    desc "start", "starts the development environment"
    def start
      say "Starting environment: #{environment}", :green
      if environment == :development
        in_environment(environment, "docker-sync.yml") do
          # put correct docker-machine ip into docker-sync config
          `sed -i '' 's/sync_host_ip:.*/sync_host_ip: '$(docker-machine ip development)'/g\' docker-sync.yml`
          system_call "docker-sync-stack clean"
          system_call "docker-sync-stack start"
        end
      else
        in_environment(environment) do
          system_call "docker-compose -f docker-compose-#{environment}.yml up"
        end
      end
    end

    desc "enter", "enters a bash shell in the development environment"
    def enter
      say "Entering environment: #{environment}", :green
      exec "docker exec -ti imi-maps-#{environment} bash"
    end

    private

    def environment
      self.class.name.downcase.split("::").last.to_sym
    end

  end

  class Development < Common; end
  class Production < Common; end
  class Staging < Production; end

  class App < Thor
    class_option :verbose, type: :boolean, aliases: '-v', default: false
    class_option :dryrun, type: :boolean, aliases: '-d', default: false

    [:development, :staging, :production].each do |environment|
      desc "#{environment} SUBCOMMAND", "manage the #{environment} environment"
      subcommand(environment, const_get("#{self.name.to_s.split("::").first}::#{environment.to_s.capitalize}"))
    end

  end
end

DockerTool::App.start(ARGV)


